<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\ObjectManager.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManagerInterface.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManager.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\dbal\\lib\\Doctrine\\DBAL\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\NamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\QuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\EntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\EntityListenerServiceResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\ContainerEntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Repository\\RepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Repository\\ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\ManagerConfigurator.php';

$a = new \Doctrine\ORM\Configuration();

$b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();

$c = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), [0 => ($this->targetDirs[3].'\\src\\Entity'), 1 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle\\Entity')]);

$b->addDriver($c, 'App\\Entity');
$b->addDriver($c, 'Vich\\UploaderBundle\\Entity');

$a->setEntityNamespaces(['App' => 'App\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity']);
$a->setMetadataCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService.php')));
$a->setQueryCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService.php')));
$a->setResultCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService.php')));
$a->setMetadataDriverImpl($b);
$a->setProxyDir(($this->targetDirs[0].'/doctrine/orm/Proxies'));
$a->setProxyNamespace('Proxies');
$a->setAutoGenerateProxyClasses(true);
$a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
$a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($this));
$a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'App\\Repository\\AssociationBaselineRepository' => ['privates', 'App\\Repository\\AssociationBaselineRepository', 'getAssociationBaselineRepositoryService.php', true],
    'App\\Repository\\AssociationEVCConfigRepository' => ['privates', 'App\\Repository\\AssociationEVCConfigRepository', 'getAssociationEVCConfigRepositoryService.php', true],
    'App\\Repository\\AssociationEquiptERTMSRepository' => ['privates', 'App\\Repository\\AssociationEquiptERTMSRepository', 'getAssociationEquiptERTMSRepositoryService.php', true],
    'App\\Repository\\BaselineRepository' => ['privates', 'App\\Repository\\BaselineRepository', 'getBaselineRepositoryService.php', true],
    'App\\Repository\\ClientsRepository' => ['privates', 'App\\Repository\\ClientsRepository', 'getClientsRepositoryService.php', true],
    'App\\Repository\\ClientsUserRepository' => ['privates', 'App\\Repository\\ClientsUserRepository', 'getClientsUserRepositoryService.php', true],
    'App\\Repository\\ConfigLogicielRepository' => ['privates', 'App\\Repository\\ConfigLogicielRepository', 'getConfigLogicielRepositoryService.php', true],
    'App\\Repository\\CountryRepository' => ['privates', 'App\\Repository\\CountryRepository', 'getCountryRepositoryService.php', true],
    'App\\Repository\\ERTMSEquipementRepository' => ['privates', 'App\\Repository\\ERTMSEquipementRepository', 'getERTMSEquipementRepositoryService.php', true],
    'App\\Repository\\EVCRepository' => ['privates', 'App\\Repository\\EVCRepository', 'getEVCRepositoryService.php', true],
    'App\\Repository\\EngineersRepository' => ['privates', 'App\\Repository\\EngineersRepository', 'getEngineersRepositoryService.php', true],
    'App\\Repository\\EquipementRepository' => ['privates', 'App\\Repository\\EquipementRepository', 'getEquipementRepositoryService.php', true],
    'App\\Repository\\ProjectSearchRepository' => ['privates', 'App\\Repository\\ProjectSearchRepository', 'getProjectSearchRepositoryService.php', true],
    'App\\Repository\\ProjectsRepository' => ['privates', 'App\\Repository\\ProjectsRepository', 'getProjectsRepositoryService.php', true],
    'App\\Repository\\SoustypeEquipementRepository' => ['privates', 'App\\Repository\\SoustypeEquipementRepository', 'getSoustypeEquipementRepositoryService.php', true],
    'App\\Repository\\TrainsRepository' => ['privates', 'App\\Repository\\TrainsRepository', 'getTrainsRepositoryService.php', true],
    'App\\Repository\\TrainsSearchRepository' => ['privates', 'App\\Repository\\TrainsSearchRepository', 'getTrainsSearchRepositoryService.php', true],
    'App\\Repository\\TypeEquipementRepository' => ['privates', 'App\\Repository\\TypeEquipementRepository', 'getTypeEquipementRepositoryService.php', true],
    'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService.php', true],
    'App\\Repository\\VersionLogicielRepository' => ['privates', 'App\\Repository\\VersionLogicielRepository', 'getVersionLogicielRepositoryService.php', true],
])));

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php')), $a);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

return $instance;
